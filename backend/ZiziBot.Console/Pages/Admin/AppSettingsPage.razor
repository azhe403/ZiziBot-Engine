@page "/admin/app-settings"
@attribute [Authorize(Roles = "Sudo")]
@using ZiziBot.DataSource.MongoEf.Entities
@using ZiziBot.Types.Types
@inherits WebComponentBase<AppSettingsViewModel>

<TitleControl Value="AppSettings"></TitleControl>

<Container Configuration="Loading" />

<RadzenDataGrid
    @* @ref="dataGrid" *@
    AllowFiltering="true"
    AllowColumnResize="true"
    AllowAlternatingRows="true"
    AllowPaging="true"
    AllowSorting="true"
    Density="Density.Default"
    FilterMode="FilterMode.SimpleWithMenu"
    PageSize="10"
    PagerHorizontalAlign="HorizontalAlign.Left"
    ShowPagingSummary="true"
    TItem="AppSettingsEntity"
    Data="ViewModel?.AppSettings"
    LogicalFilterOperator="LogicalFilterOperator.Or"
    PageSizeOptions="ValueConst.PaginationSize"
    RowUpdate="@OnUpdateRow"
    RowCreate="@OnCreateRow"
    ColumnWidth="200px"
    Sort="() => { }">
    <HeaderTemplate>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
            <RadzenButton Style="padding: 2px;" Click="LoadData" Text="Refresh"></RadzenButton>
        </RadzenStack>
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="AppSettingsEntity" Property="Field" Title="Field" Frozen="true" FrozenPosition="FrozenColumnPosition.Left" />
        <RadzenDataGridColumn TItem="AppSettingsEntity" Property="DefaultValue" Title="DefaultValue" Width="260px" />
        <RadzenDataGridColumn TItem="AppSettingsEntity" Property="Value" Title="Value" Width="260px">
            <EditTemplate Context="entity">
                <RadzenTextArea @bind-Value="entity.Value" Style="display: block" Rows="5" Name="Value" class="w-100" />
                <RadzenRequiredValidator Text="Value is required" Component="Value" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="AppSettingsEntity" Property="CreatedDate" Title="Created Date" Width="180px" />
        <RadzenDataGridColumn TItem="AppSettingsEntity" Property="UpdatedDate" Title="Updated Date" Width="180px" />
        <RadzenDataGridColumn TItem="AppSettingsEntity" Title="Action" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true"
                              FrozenPosition="FrozenColumnPosition.Left">
            <Template Context="order">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(order))"
                              @onclick:stopPropagation="true">
                </RadzenButton>
                @* <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true"> *@
                @* </RadzenButton> *@
            </Template>
            <EditTemplate Context="order">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(order))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(order))">
                </RadzenButton>
                @* <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(order))"> *@
                @* </RadzenButton> *@
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {

    AppSettingsEntity editRow;
    AppSettingsEntity insertRow;

    private string[] _roles = Array.Empty<string>();

    public RadzenDataGrid<AppSettingsEntity> dataGrid { get; set; }
    public LoadingConfiguration Loading { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        Loading.TotalSteps = 2;
        Loading.Title = "Getting Data";
        Loading.IsLoading = true;

        Loading.CurrentStep++;

        await ViewModel?.LoadData()!;

        await Task.Delay(1000);

        Loading.CurrentStep++;
        Loading.Title = "Almost there...";

        await Task.Delay(200);

        Loading.IsLoading = false;
    }

    void Reset()
    {
        editRow = null;
        insertRow = null;
    }

    private async Task EditRow(AppSettingsEntity order)
    {
        editRow = order;
        await dataGrid.EditRow(order);
    }

    private Task DeleteRow(AppSettingsEntity order)
    {
        throw new NotImplementedException();
    }

    private async Task SaveRow(AppSettingsEntity order)
    {
        await dataGrid.UpdateRow(order);
    }

    private async Task CancelEdit(AppSettingsEntity order)
    {
        Reset();

        dataGrid.CancelEditRow(order);

        await Task.Delay(1);
    }

    private async Task OnUpdateRow(AppSettingsEntity arg)
    {
        Reset();

        await ViewModel?.Update(arg);
    }

    private Task OnCreateRow(AppSettingsEntity arg)
    {
        throw new NotImplementedException();
    }

}